#!/usr/bin/perl -W

# $Id$
# WorkflowCommon.pm
# from INB Interactive Web Workflow Enactor & Manager (IWWE&M)
# Author: José María Fernández González (C) 2007-2008
# Institutions:
# *	Spanish National Cancer Research Institute (CNIO, http://www.cnio.es/)
# *	Spanish National Bioinformatics Institute (INB, http://www.inab.org/)

use strict;

package WorkflowCommon;

use CGI;
use Encode;
use File::Path;
use File::Temp;
use FindBin;
use LWP::UserAgent;
use Mail::Sender;
use POSIX qw(strftime);
use XML::LibXML;

use lib "$FindBin::Bin";
use IWWEM::Config;
use IWWEM::MailConfig;

use vars qw($WORKFLOWFILE $SVGFILE $PNGFILE $PDFFILE $WFIDFILE $DEPDIR $EXAMPLESDIR $SNAPSHOTSDIR);

use vars qw($INPUTSFILE $OUTPUTSFILE);

use vars qw($REPORTFILE $STATICSTATUSFILE);

use vars qw($LAUNCHERDIR);

use vars qw($VIRTWORKFLOWDIR $VIRTJOBDIR $VIRTIDDIR $VIRTRESULTSDIR);
use vars qw($RESULTSDIR $ETCRELDIR $ETCDIR);

use vars qw($COMMANDFILE $PENDINGERASEFILE $PENDINGADDFILE);

use vars qw($ITERATIONSDIR);

use vars qw($COMMANDADD $COMMANDERASE);

use vars qw($PATTERNSFILE);

use vars qw($BACLAVAPARAM $PARAMWFID $PARAMWORKFLOWDEP $PARAMWORKFLOW $PARAMISLAND);
use vars qw($PARAMPREFIX $ENCODINGPREFIX $MIMEPREFIX);
use vars qw($SNAPSHOTPREFIX $EXAMPLEPREFIX $ENACTIONPREFIX $WORKFLOWPREFIX);
use vars qw($WFD_NS $PAT_NS $XSCUFL_NS $BACLAVA_NS);

use vars qw($PARAMSAVEEX $PARAMSAVEEXDESC $CATALOGFILE $RESPONSIBLEFILE $LOCKFILE);

use vars qw($COMMENTPRE $COMMENTPOST $COMMENTWM $COMMENTEL $COMMENTES);

use vars qw($LICENSESTART $LICENSESTOP);

use vars qw(%GRAPHREP);

use vars qw($RESPONSIBLENAME $RESPONSIBLEMAIL);

use vars qw($LICENSENAME $LICENSEURI);

use vars qw(@PATHCHECK $WFKIND $ENKIND);

# Workflow files constants
$RESPONSIBLENAME='responsibleName';
$RESPONSIBLEMAIL='responsibleMail';
$LICENSENAME='licenseName';
$LICENSEURI='licenseURI';

$WORKFLOWFILE='workflow.xml';
$SVGFILE='workflow.svg';
$PDFFILE='workflow.pdf';
$PNGFILE='workflow.png';
$WFIDFILE='WFID';

%GRAPHREP=(
	$WorkflowCommon::SVGFILE => 'image/svg+xml',
	$WorkflowCommon::PNGFILE => 'image/png',
	$WorkflowCommon::PDFFILE => 'application/pdf'
);

$DEPDIR='dependencies';
$EXAMPLESDIR='examples';
$SNAPSHOTSDIR='snapshots';
$ITERATIONSDIR='Iterations';

$ETCRELDIR = 'etc';
$ETCDIR = $FindBin::Bin . '/../' .$ETCRELDIR;

# Virtual dirs
$VIRTWORKFLOWDIR = 'workflows';
$VIRTJOBDIR = 'enactions';
$VIRTIDDIR = 'id';

$RESULTSDIR = 'Results';
$VIRTRESULTSDIR = $RESULTSDIR;

# Patterns file
$PATTERNSFILE = $ETCDIR . '/' . 'EVpatterns.xml';

# Launcher directory
$LAUNCHERDIR = $FindBin::Bin.'/INBWorkflowLauncher';

$PENDINGERASEFILE='eraselist.txt';
$PENDINGADDFILE='addlist.txt';
$COMMANDFILE='.command';
$COMMANDADD='add';
$COMMANDERASE='erase';

$PARAMWFID='id';
$PARAMWORKFLOW='workflow';
$PARAMWORKFLOWDEP='workflowDep';
$PARAMISLAND='dataIsland';
$PARAMSAVEEX='exampleName';
$PARAMSAVEEXDESC='exampleDesc';
$BACLAVAPARAM='BACLAVA_FILE';
$PARAMPREFIX='PARAM_';
$ENCODINGPREFIX='ENCODING_';
$MIMEPREFIX='MIME_';
$SNAPSHOTPREFIX='snapshot:';
$EXAMPLEPREFIX='example:';
$ENACTIONPREFIX='enaction:';
$WORKFLOWPREFIX='workflow:';

$CATALOGFILE='catalog.xml';
$RESPONSIBLEFILE='responsible.xml';
$INPUTSFILE='Inputs.xml';
$OUTPUTSFILE='Outputs.xml';
$REPORTFILE='report.xml';
$STATICSTATUSFILE='staticstatus.xml';
$LOCKFILE='.lockfile';

$WFD_NS = 'http://www.cnio.es/scombio/jmfernandez/inb/IWWEM/frontend';
$PAT_NS = $WFD_NS . '/patterns';
$XSCUFL_NS = 'http://org.embl.ebi.escience/xscufl/0.1alpha';
$BACLAVA_NS = 'http://org.embl.ebi.escience/baclava/0.1alpha';

$COMMENTPRE = '	This content was generated by ';
$COMMENTPOST =<<COMMENTEOF;
, an
	application of IWWE\&M, INB Interactive Web Workflow Enactor \& Manager
	The workflow enactor itself is based on Taverna core, and
	uses it.
	
	Author: José María Fernández González (C) 2007-2008
	Institutions:
	*	Spanish National Cancer Research Institute (CNIO, http://www.cnio.es/)
	*	Spanish National Bioinformatics Institute (INB, http://www.inab.org/)
COMMENTEOF

$COMMENTWM=$COMMENTPRE.'workflowmanager'.$COMMENTPOST;
$COMMENTEL=$COMMENTPRE.'enactionlauncher'.$COMMENTPOST;
$COMMENTES=$COMMENTPRE.'enactionstatus'.$COMMENTPOST;

$LICENSESTART=('-' x 30)."LICENSE URI START".('-' x 30);
$LICENSESTOP= ('-' x 30)."LICENSE URI  STOP".('-' x 30);

use vars qw($ISRAWFILE $ISFORBIDDEN $ISEXAMPLE $ISINPUT $ISOUTPUT $ISRAWDIR $ISIDDIR $ISENDIR);
# undef means a raw file
$ISRAWFILE=undef;
# -1 means a forbidden file/dir
$ISFORBIDDEN=-1;
# 0, 1 or 2 mean a raw file which is handled as a result.
$ISEXAMPLE=0;
$ISINPUT=1;
$ISOUTPUT=2;
# 10 means a raw directory
$ISRAWDIR=10;
$ISIDDIR=11;
# 20 means an enaction/snapshot directory
$ISENDIR=20;

my($DEPSUBTREE)=[$DEPDIR,$ISRAWDIR,[
		["^[0-9a-f].+[0-9a-f]\\.xml",undef,undef],
	]
];	# Contains only files and no catalog at all


my($ENACTSUBTREE)=[
	$DEPSUBTREE,
	[$VIRTRESULTSDIR,$ISRAWDIR,[
			['^.+',$ISIDDIR,[
					[$INPUTSFILE,$ISINPUT,undef],
					[$OUTPUTSFILE,$ISOUTPUT,undef],
					[$ITERATIONSDIR,$ISRAWDIR,[
							["^[0-9]+",$ISRAWDIR,[
									[$INPUTSFILE,$ISINPUT,undef],
									[$OUTPUTSFILE,$ISOUTPUT,undef],
								]
							],
						]
					],
				]
			],
		]
	],	# Contains lots of directories
	[$WORKFLOWFILE,$ISRAWFILE,undef],
	[$SVGFILE,$ISRAWFILE,undef],
	[$PDFFILE,$ISRAWFILE,undef],
	[$PNGFILE,$ISRAWFILE,undef],
	[$REPORTFILE,$ISRAWFILE,undef],
	[$INPUTSFILE,$ISINPUT,undef],
	[$OUTPUTSFILE,$ISOUTPUT,undef],
];

$WFKIND=[
	$VIRTWORKFLOWDIR,
	$IWWEM::Config::WORKFLOWDIR,
	[
		["^[0-9a-fA-F].+[0-9a-fA-F]",$ISIDDIR,[
				[$EXAMPLESDIR,$ISRAWDIR,[
						[$CATALOGFILE,$ISFORBIDDEN,undef],
						["^[0-9a-fA-F].+[0-9a-fA-F]\\.xml",$ISEXAMPLE,undef]
					]
				],	# Contains files
				[$SNAPSHOTSDIR,$ISRAWDIR,[
						[$CATALOGFILE,$ISFORBIDDEN,undef],
						["^[0-9a-fA-F].+[0-9a-fA-F]",$ISIDDIR,$ENACTSUBTREE]
					]
				],	# Contains directories
				$DEPSUBTREE,
				[$WORKFLOWFILE,$ISRAWFILE,undef],
				[$SVGFILE,$ISRAWFILE,undef],
				[$PDFFILE,$ISRAWFILE,undef],
				[$PNGFILE,$ISRAWFILE,undef],
			]
		],
	]
];

$ENKIND=[
	$VIRTJOBDIR,
	$IWWEM::Config::JOBDIR,
	[
		["^[0-9a-fA-F].+[0-9a-fA-F]",$ISIDDIR,$ENACTSUBTREE],
	]
];

@PATHCHECK=(
	$WFKIND,
	$ENKIND, 
	[
		$VIRTIDDIR,
		undef,
		[
			["^${WORKFLOWPREFIX}[^:]+",$ISIDDIR,undef],
			["^${ENACTIONPREFIX}[^:]+",$ISIDDIR,undef],
			["^${SNAPSHOTPREFIX}[^:]+:[^:]+",$ISIDDIR,undef],
			["^${EXAMPLEPREFIX}[^:]+:[^:]+",$ISEXAMPLE,undef],
		]
	]
);


# Method declaration
sub genUUID();
sub patchXMLString($);
sub depatchPath($);

sub getCGIBaseURI($);
sub genPendingOperationsDir($);
sub createResponsibleFile($$;$);
sub createMailer();
sub enactionGUIURI($$);
sub sendResponsibleConfirmedMail($$$$$$$;$$);
sub sendResponsiblePendingMail($$$$$$$$);
sub sendEnactionMail($$$;$);

sub genCheckList(\@);

# Method bodies
sub genUUID() {
	my($randname)=undef;
	my($RANDH);
	if(open($RANDH,'-|','uuidgen')) {
		$randname=<$RANDH>;
		chomp($randname);
		close($RANDH);
	}
	unless(defined($randname) && length($randname)>0) {
		my(@rarr)=();
		foreach my $step (1..8) {
			push(@rarr,sprintf('%04x',rand(65536)));
		}
		$randname="$rarr[0]$rarr[1]-$rarr[2]-$rarr[3]-$rarr[4]-$rarr[5]$rarr[6]$rarr[7]";
	}
	
	return $randname;
}

sub patchXMLString($) {
	my($trans)=@_;
	
	$trans =~ s/\&/\&amp;/g;
	$trans =~ s/'/\&apos;/g;
	$trans =~ s/"/\&quot;/g;
	$trans =~ s/</\&lt;/g;
	$trans =~ s/>/\&gt;/g;
	
	return $trans;
}

sub depatchPath($) {
	#my($trans)=WorkflowCommon::patchXMLString($_[0]);
	my($trans)=$_[0];
	
	# Deconstructing some work
	$trans =~ s/\&#35;/#/g;
	$trans =~ s/\&#x0*23;/#/g;
	$trans =~ s/\&#47;/\//g;
	$trans =~ s/\&#x0*2[fF];/\//g;
	$trans =~ s/\&amp;/\&/g;
	#$trans =~ s/\&#38;/\&/g;
	#$trans =~ s/\&#x0*26;/\&/g;
	
	return $trans;
}

sub getCGIBaseURI($) {
	my($query)=@_;
	
	my($proto)=($query->https())?'https':'http';
	my($host)=$query->virtual_host();
	my($port)=$query->virtual_port();
	my($relpath)=$query->script_name();
	my($virtualrel)=undef;
	
	$host =~ s/[, ]+.*$//;
	if(exists($ENV{'HTTP_X_FORWARDED_HOST'})) {
		$virtualrel=(split(/[ ,]+/,$ENV{'HTTP_X_FORWARDED_HOST'},2))[0];
	} elsif(exists($ENV{'HTTP_VIA'})) {
		$virtualrel=$ENV{'HTTP_VIA'};
		$virtualrel =~ tr/\n/ /;
		$virtualrel =~ s/^[ \t]+//;
		my(@virparts)=split(/[ \t\n]+/,$virtualrel,3);
		$virtualrel= $virparts[(scalar(@virparts)>1)?1:0];
	#} elsif(exists($ENV{'HTTP_X_FORWARDED_FOR'})) {
	#	
	#} elsif(exists($ENV{'HTTP_FORWARDED'})) {
	#	$virtualrel=$ENV{'HTTP_FORWARDED'};
	}
	
	#foreach my $key ('HTTP_VIA','HTTP_FORWARDED','HTTP_X_FORWARDED_FOR','HTTP_X_FORWARDED_HOST') {
	#	print STDERR "$key IS ",$ENV{$key},"\n"  if(exists($ENV{$key}));
	#}
	
        if(($proto eq 'http' && $port eq '80') || ($proto eq 'https' && $port eq '443')) {
		$port='';
	} else {
		$port = ':'.$port;
	}
	
	if(defined($virtualrel)) {
		# print STDERR "VIRTUALREL IS $virtualrel\n";
		if($virtualrel =~ /^(?:https?:\/\/[^:\/]+)?(?::[0-9]+)?(\/.*)/) {
			$relpath=$1;
		} elsif(exists($IWWEM::Config::HARDHOST{$virtualrel})) {
			$relpath=$IWWEM::Config::HARDHOST{$virtualrel}.substr($relpath,rindex($relpath,'/'));
		}
	}
	
	# print STDERR "GIVEN URL IS '$proto://$host$port$relpath'\n";
	
	return "$proto://$host$port$relpath";
}

# Generates a pending operation directory structure
sub genPendingOperationsDir($) {
	my($oper)=@_;
	
	# Generating a unique identifier
	my($randname);
	my($randfilexml);
	my($randdir);
	do {
		$randname=WorkflowCommon::genUUID();
		$randdir=$IWWEM::Config::CONFIRMDIR.'/'.$randname;
	} while(-d $randdir);

	# Creating workflow directory
	mkpath($randdir);
	my($COM);
	my($FH);
	if(open($COM,'>',$randdir.'/'.$WorkflowCommon::COMMANDFILE)) {
		print $COM $oper;
		close($COM);
		if($oper eq $WorkflowCommon::COMMANDADD) {
			# touch
			open($FH,'>',$randdir.'/'.$WorkflowCommon::PENDINGADDFILE);
		} elsif($oper eq $WorkflowCommon::COMMANDERASE) {
			# touch
			open($FH,'>',$randdir.'/'.$WorkflowCommon::PENDINGERASEFILE);
		}
	}
	
	return ($randname,$randdir,$FH);
}

# Responsible name and mail must be already in UTF-8!
sub createResponsibleFile($$;$) {
	my($basedir,$responsibleMail,$responsibleName)=@_;
	
	$responsibleName=''  unless(defined($responsibleName));
	
	eval {
		my($resdoc)=XML::LibXML::Document->createDocument('1.0','UTF-8');
		my($resroot)=$resdoc->createElementNS($WorkflowCommon::WFD_NS,'responsible');
		$resroot->appendChild($resdoc->createComment( encode('UTF-8',$WorkflowCommon::COMMENTEL) ));
		$resroot->setAttribute($WorkflowCommon::RESPONSIBLEMAIL,$responsibleMail);
		$resroot->setAttribute($WorkflowCommon::RESPONSIBLENAME,$responsibleName);
		$resdoc->setDocumentElement($resroot);
		$resdoc->toFile($basedir.'/'.$WorkflowCommon::RESPONSIBLEFILE);
	};
	
	return $@;
}

sub createMailer() {
	my($smtp) = Mail::Sender->new({smtp=>$IWWEM::Config::SMTPSERVER,
		auth=>'LOGIN',
		auth_encoded=>$IWWEM::Config::SMTP_ENCODED_CREDS,
		authid=>$IWWEM::Config::SMTPUSER,
		authpwd=>$IWWEM::Config::SMTPPASS
	#	subject=>'Prueba4',
	#	debug=>\*STDERR
	});
	
	return $smtp;
}

sub enactionGUIURI($$) {
	my($query,$jobId)=@_;
	
	my($operURL)=undef;
	
	if(defined($jobId)) {
		$operURL = WorkflowCommon::getCGIBaseURI($query);
		$operURL =~ s/cgi-bin\/[^\/]+$//;
		$operURL.="enactionviewer.html?jobId=$jobId";
	}
	
	return $operURL;
}

sub sendResponsibleConfirmedMail($$$$$$$;$$) {
	my($smtp,$code,$kind,$command,$irelpath,$responsibleMail,$prettyname,$query,$enId)=@_;
	
	$smtp=WorkflowCommon::createMailer()  unless(defined($smtp));
	my($prettyop)=($command eq $WorkflowCommon::COMMANDADD)?'added':'disposed';
	
	my($operURL)=WorkflowCommon::enactionGUIURI($query,$enId);
	my($addmesg)='';
	if(defined($operURL)) {
		$addmesg="You can browse it at\r\n\r\n$operURL\r\n";
	}
	
	return $smtp->MailMsg({
		from=>"\"$IWWEM::Common::IWWEMmailname\" <$IWWEM::Common::IWWEMmailaddr>",
		to=>"\"IWWE&M user\" <$responsibleMail>",
		subject=>"Your $kind $irelpath has just been $prettyop",
		msg=>"Dear IWWE&M user,\r\n    as you have just confirmed petition ".
			$code.", your $kind $irelpath".(defined($prettyname)?(" (known as $prettyname)"):'').
			" has just been $prettyop\r\n$addmesg\r\n    The INB Interactive Web Workflow Enactor & Manager system"
	});
}

sub sendEnactionMail($$$;$) {
	my($query,$jobId,$responsibleMail,$hasFinished)=@_;
	
	my($smtp)=WorkflowCommon::createMailer();
	my($operURL)=WorkflowCommon::enactionGUIURI($query,$jobId);
	my($status)=defined($hasFinished)?'finished':'started';
	my($dataStatus)=defined($hasFinished)?'results':'progress';
	return $smtp->MailMsg({
		from=>"\"$IWWEM::Common::IWWEMmailname\" <$IWWEM::Common::IWWEMmailaddr>",
		to=>"\"IWWE&M user\" <$responsibleMail>",
		subject=>"Your enaction $jobId has just $status",
		msg=>"Dear IWWE&M user,\r\n    your enaction $jobId has just $status. You can see the $dataStatus at\r\n\r\n$operURL\r\n\r\nThe INB Interactive Web Workflow Enactor & Manager system"
	});
}

sub sendResponsiblePendingMail($$$$$$$$) {
	my($query,$smtp,$code,$kind,$command,$irelpath,$responsibleMail,$prettyname)=@_;
	
	$smtp=WorkflowCommon::createMailer()  unless(defined($smtp));
	my($prettyop)=($command eq $WorkflowCommon::COMMANDADD)?'addition':'deletion';
	
	my($operURL)=WorkflowCommon::getCGIBaseURI($query);
	$operURL =~ s/cgi-bin\/[^\/]+$//;
	$operURL.="cgi-bin/IWWEMconfirm?code=$code";
	
	return $smtp->MailMsg({
		from=>"\"$IWWEM::Common::IWWEMmailname\" <$IWWEM::Common::IWWEMmailaddr>",
		to=>"\"IWWE&M user\" <$responsibleMail>",
		subject=>"Confirmation for $prettyop of $kind $irelpath",
		msg=>"Dear IWWE&M user,\r\n    before the $prettyop of $kind $irelpath".
			(defined($prettyname)?(" (known as $prettyname)"):'').
			" you must confirm it by visiting\r\n\r\n$operURL\r\n\r\n    The INB Interactive Web Workflow Enactor & Manager system"
	});
}

sub genCheckList(\@) {
	my($p_IAR)=@_;
	my($retval)=undef;
	foreach my $token (@{$p_IAR}) {
		if(defined($retval)) {
			$retval .= ', '.$token->[0];
		} else {
			$retval=$token->[0];
		}
	}
	return $retval;
}

1;
