$Id$

INBWorkflowLauncher backends 0.3.0
==================================

This file is part of IWWE&M, the Interactive Web Workflow Enactor & Manager.

IWWE&M is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

IWWE&M is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with IWWE&M.  If not, see <http://www.gnu.org/licenses/agpl.txt>.

Original IWWE&M concept, design and coding done by
José María Fernández González, INB (C) 2008-2009.
Source code of IWWE&M is available at http://trac.bioinfo.cnio.es/trac/iwwem

Introduction
------------

This program is a wrapper around Taverna1 libraries, so
Taverna1 workflows which don't need interactions can be
run from command line.

This program is based on Taverna's 1.6.2.0 example program
workflowlauncher, whose sources can be fetched from Taverna
Project Sourceforge Site. This program is very interesting
because it removes most of the Taverna's Raven overhead,
so load time is better than Taverna's one. The drawback of
this approach is that the application cannot self update
the core components from Taverna that it uses.

Prerequisites & Configuration
-----------------------------

As Taverna, this is a Java application which needs a compliant
Java JRE 1.5 (or better) Virtual Machine. The application was
tested and compiled with Sun JDK 1.6, so if you have any
problem please contact me (jmfernandez@cnio.es).

Once the application bundle is uncompressed, you can see several
sub-directories. The more interestings are:

*	bin: This one contains scripts to run the application
	from Unix and Windows.
*	conf: The configuration files for Taverna and log4j cores
	live here.
*	repo: All the Java libraries needed by the application
	are located here. As Taverna, this application has been
	compiled using Maven, so this directory is basically a
	maven local repository.

By default, the application will generate a log file called
inbworkflowlauncher.log at user's home directory. This behaviour
can be changed setting up log4j.properties file which lives in
"conf" subdirectory.

Also by default, the application is going to create a directory
called .inb-maven at user's home directory. This directory contains
all the runtime libraries needed by Taverna which are not from its
core, like SOAP, WSDL or BioMOBY plugins. This is also a maven
repository. The location of the directory can be changed on
invocation using -basedir param, which is explained below.

Invocation
----------

Usage: inbworkflowlauncher {param}*

  where {param} can be:
	-h (0 arguments)
		Shows this help
	-help (0 arguments)
		Shows this help
	-debug (0 arguments)
		Turns on debugging
	-workflow (1 argument)
		Workflow to be processed/run
	-inputdoc (1 argument)
		All the workflow inputs, encoded in a Baclava document
	-input (2 arguments)
		A single pair input name / value
	-inputFile (2 arguments)
		A single pair input name / file where the value is stored
	-inputURL (2 arguments)
		A single pair input name / URL where the value can be fetched
	-inputArray (2 arguments)
		A single pair input name / file where a list of values are stored
	-inputArrayFile (2 arguments)
		A single pair input name / file which contains a list of file names which contain the values
	-outputdoc (1 argument)
		All the workflow outputs, saved in a Baclava document
	-outputdir (1 argument)
		All the workflow outputs, saved in a directory which will contain the structure of the outputs
	-report (1 argument)
		Taverna XML report file
	-svggraph (1 argument)
		File where to save workflow graph in SVG format
	-dotgraph (1 argument)
		File where to save workflow graph in DOT format
	-basedir (1 argument)
		Maven repository dirname

Known bugs
----------

The invocation scripts were generated by Maven's appassembler plugin. This plugin
generates scripts which change the current working directory to the application's
base dir. Although the problem has been circumvected for Unix environments, we
were unable to do so for Windows. So input, directory and output paths cannot be
relative ones, because they are going to point to the wrong place.
